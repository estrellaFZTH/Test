import java.io.File;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class TimeSeries {


    public static void main(String[] args) {
        double[] X = new double[]{0.20476055555617578, 0.20476055555617578, 0.20476055555617578, 0.2198520682646596,
                0.2198520682646596, 0.2198520682646596, 0.19733152555494998, 0.19733152555495, 0.19733152555495,
                0.1646880422221228, 0.16468804222212283, 0.16468804222212283, 0.2348144155560779, 0.23481441555607796,
                0.23481441555607796, 0.20966829666627337, 0.2096682966662734, 0.2096682966662734, 0.14693180444434495,
                0.14693180444434498, 0.14693180444434498, 0.21500402902337243, 0.21500402902337243, 0.21500402902337243,
                0.19769332799985115, 0.19769332799985115, 0.19769332799985115, 0.19027251908423792, 0.19027251908423792,
                0.19027251908423792, 0.20041647611795402, 0.20041647611795402, 0.20041647611795402, 0.22866977010343714,
                0.22866977010343714, 0.22866977010343714, 0.20466809999915217, 0.2046680999991521, 0.2046680999991521,
                0.20174192860305257, 0.20174192860305257, 0.20174192860305257, 0.16902238296780914, 0.16902238296780914,
                0.16902238296780914, 0.22252675910822903, 0.22252675910822903, 0.22252675910822903, 0.205945559296312,
                0.205945559296312, 0.205945559296312, 0.21273620333381085, 0.21273620333381082, 0.21273620333381082,
                0.1584325600255205, 0.1584325600255205, 0.1584325600255205, 0.18727815666655562, 0.18727815666655562,
                0.18727815666655562, 0.20811480604958071, 0.20811480604958071, 0.20811480604958071, 0.18605901692143792,
                0.18605901692143792, 0.18605901692143792, 0.23037354111086944, 0.23037354111086947, 0.23037354111086947,
                0.12949461333341278, 0.1294946133334128, 0.1294946133334128, 0.2544856611110743, 0.25448566111107435,
                0.25448566111107435, 0.14800999144446966, 0.14800999144446966, 0.14800999144446966, 0.2052450784973689,
                0.2052450784973689, 0.2052450784973689, 0.27134526444418344, 0.2713452644441835, 0.2713452644441835,
                0.18275191173068017, 0.18275191173068017, 0.18275191173068017, 0.15152248258351583, 0.15152248258351583,
                0.15152248258351583, 0.20506239555541264, 0.20506239555541267, 0.20506239555541267, 0.20803088777837622,
                0.2080308877783763, 0.2080308877783763, 0.16888654288477517, 0.16888654288477517, 0.16888654288477517,
                0.20686009910753883, 0.20686009910753883, 0.20686009910753883, 0.19617708333347153, 0.19617708333347159,
                0.19617708333347159, 0.18721165816598165, 0.18721165816598165, 0.18721165816598165, 0.21155864693429388,
                0.21155864693429388, 0.21155864693429388, 0.19484238696865627, 0.19484238696865627, 0.19484238696865627,
                0.20913355554786853, 0.20913355554786853, 0.20913355554786853, 0.20518215607200993, 0.20518215607200993,
                0.20518215607200993, 0.16640903444416236, 0.16640903444416227, 0.16640903444416227, 0.22063870111095543,
                0.22063870111095535, 0.22063870111095535, 0.16899791118091806, 0.16899791118091806, 0.16899791118091806,
                0.19729763111121829, 0.19729763111121834, 0.19729763111121834, 0.21734359034138642, 0.21734359034138642,
                0.21734359034138642, 0.23783661433583175, 0.23783661433583175, 0.23783661433583175, 0.1827813166664782,
                0.18278131666647823, 0.18278131666647823, 0.1945289100002709, 0.19452891000027092, 0.19452891000027092,
                0.19151380222158168, 0.19151380222158168, 0.19151380222158168, 0.21268507616941773, 0.21268507616941773,
                0.21268507616941773, 0.2072599502240364, 0.2072599502240364, 0.2072599502240364, 0.20270226896430774,
                0.20270226896430774, 0.20270226896430774, 0.13961318400502917, 0.13961318400502917, 0.13961318400502917,
                0.23403006555579642, 0.2340300655557965, 0.2340300655557965, 0.1844373511110259, 0.1844373511110259,
                0.1844373511110259, 0.17440386012838868, 0.17440386012838868, 0.17440386012838868, 0.20102040376449443,
                0.20102040376449443, 0.20102040376449443, 0.2052608299997397, 0.20526082999973977, 0.20526082999973977,
                0.19841418111152756, 0.19841418111152762, 0.19841418111152762, 0.18076769555540925, 0.18076769555540928,
                0.18076769555540928, 0.22635600075585843};

        new ArrayList<>();

        // 参数1： a，水平平滑参数
        double a = 0.7;
        // 参数2： b, 趋势平滑参数
        double b = 0.2;
        // 参数3:  r, 季节性平滑参数，控制季节成分的影响
        double r = 0.3;
        //  用 m 表示季节频率，比如季度数据 m = 4
        int m = 10;
        //   水平方程:  L[t] = a * (X[t] - S[t-m]) + (1 - a) * (L[t-1] + B[t-1]);
        //  L[0] 是每个周期初始值之和的平均值
        double[] L = new double[X.length];
        //   趋势方程:  B[t] = b * (L[t] - L[t-1]) + (1 - b) * B[t-1];
        double[] B = new double[X.length];
        //  季节性方程: S[t] = r * (X[t] - L[t-1] - B[t-1]) + (1 - r) * S[t-m];
        double[] S = new double[X.length];
        //  预测方程:   predict[t+h] = L[t] + h * B[t] + S[t-m + h];
        double[] predict = new double[X.length];


        L[7] = 0.178178616361177;
        // i= 8 开始
        L[8] = 0.178178616361177;
        L[9] = 0.179794743906182;
        L[10] = 0.180053324313383;
        L[11] = 0.179999668878889;
        L[12] = 0.179856098572301;
        L[13] = 0.179695603725546;
        L[14] = 0.179541266156014;
        L[15] = 0.179399579399515;
        L[16] = 0.179271605959882;
        L[17] = 0.179156704656083;
        L[18] = 0.223072249211433;

        B[7] = 0.006733864770856;
        // i= 8 开始
        B[8] = 0.005387091816685;
        B[9] = 0.004632898962349;
        B[10] = 0.004195467106834;
        B[11] = 0.003770554852701;
        B[12] = 0.003379142336772;
        B[13] = 0.003025178618419;
        B[14] = 0.002707226999624;
        B[15] = 0.002422335624012;
        B[16] = 0.002167304717648;
        B[17] = 0.001939084115503;
        B[18] = 0.006136730159488;

        double[] SS = new double[11];
        SS[0] = 0.019152909193773;
        SS[1] = 0.013490574139055;
        SS[2] = 0.013490574139055;
        SS[3] = 0.013490574139055;
        SS[4] = 0.056635799194900;
        SS[5] = 0.056635799194900;
        SS[6] = 0.056635799194900;
        SS[7] = 0.031489680305096;
        SS[8] = 0.031489680305096;
        SS[9] = 0.031489680305096;
        SS[10] = 0.031246811916833;

        for (int i = 8; i < SS.length; i++) {
            S[i] = r * (X[i] - L[i - 1] - B[i - 1]) + (1 - r) * S[i - 1];
        }

        int h = 1;
        predict[19] = L[18] + h * B[18] + S[18 - m + h];
        for (int t = 19; t < X.length - 20; t++) {
            L[t] = a * (predict[t] - S[t - m]) + (1 - a) * (L[t - 1] + B[t - 1]);
            B[t] = b * (predict[t] - L[t - 1]) + (1 - b) * B[t - 1];
            S[t] = r * (predict[t] - L[t - 1] - B[t - 1]) + (1 - r) * S[t - m];
            predict[t + h] = L[t] + h * B[t] + S[t - m + h];
        }
        List<Double> predictList = new ArrayList<>();
        for (int t = 0; t < 19; t++) {
            predictList.add(0.20);
        }
        for (int t = 19; t < X.length - 20; t++) {
            predictList.add(predict[t]);
        }
        for (int t = X.length - 20; t < X.length; t++) {
            predictList.add(0.20);
        }

        System.out.println(predictList);


    }

////        System.out.println(Double.valueOf("0.15210578555575519"));
//        List<Data> list = new ArrayList<>();
//        String[] datas = str.split("\\n");
//        for(int i = 0; i < datas.length; i++){
//            String[] ss = datas[i].split(" ");
//            list.add(new Data(Double.valueOf(ss[0]), i * 15));
//        }
//        System.out.println(list.size());
////        for(int i = 0; i < list.size(); i++){
////            System.out.println(list.get(i).time);
////        }
//        List<Double> CpuUsagePercentage = new ArrayList<>();
//        List<Integer> time = new ArrayList<>();
//        for(int i = 0; i < list.size(); i++){
//            CpuUsagePercentage.add(list.get(i).val);
//            time.add(list.get(i).time);
//        }
//        System.out.println(CpuUsagePercentage);
//        System.out.println(time);
//
//    }

    private static class Data{
        private Double val;
        private Integer time;

        public Data(Double val, Integer time){
            this.val = val;
            this.time = time;
        }
    }
}
